%% Convolution Neural Network Exercise

%  Instructions
%  ------------
% 
%  This file contains code that helps you get started in building a single.
%  layer convolutional nerual network. In this exercise, you will only
%  need to modify cnnCost.m and cnnminFuncSGD.m. You will not need to 
%  modify this file.

%%======================================================================
%% STEP 0: Initialize Parameters and Load Data
%  Here we initialize some parameters used for the exercise.
clear all;close all;clc;
% Configuration
imageDim = 28;
numClasses = 10;  % Number of classes (MNIST images fall into 10 classes)
filterDim = 9;    % Filter size for conv layer
numFilters = 20;   % Number of filters for conv layer
poolDim = 2;      % Pooling dimension, (should divide imageDim-filterDim+1)
numChannels = 1;


    
    
% Load MNIST Train
addpath ../common/;
images = loadMNISTImages('../common/train-images-idx3-ubyte');
images = reshape(images,imageDim,imageDim,1,[]);
labels = loadMNISTLabels('../common/train-labels-idx1-ubyte');
labels(labels==0) = 10; % Remap 0 to 10

% Initialize Parameters

%%======================================================================
%% STEP 1: Implement convNet Objective
%  Implement the function cnnCost.m.

%%======================================================================
%% STEP 2: Gradient Check
%  Use the file computeNumericalGradient.m to check the gradient
%  calculation for your cnnCost.m function.  You may need to add the
%  appropriate path or copy the file to this directory.

DEBUG=false;  % set this to true to check gradient
if DEBUG
    % To speed up gradient checking, we will use a reduced network and
    % a debugging data set
    
    ei.lambda = 0.01;
    ei.layer_type = {'conv','nonlinear','conv','nonlinear','pool','full'};
    
    ei.layer_param = cell(length(ei.layer_type),1);
    ei.layer_param{1}.filterDim = 9;
    ei.layer_param{1}.numFilters = 2;
    ei.layer_param{1}.numInput = 1;
    
    
    ei.layer_param{2}.activation_fun = 'tanh';
    
    ei.layer_param{3}.filterDim = 6;
    ei.layer_param{3}.numFilters = 4;
    ei.layer_param{3}.numInput = 2;
    
    
    ei.layer_param{4}.activation_fun = 'relu';
    
    
    
    ei.layer_param{5}.pool_size = 5;
    %now local_size and pool_size must be the same for backprop
    ei.layer_param{5}.local_size = 5;
    ei.layer_param{5}.type = 'max';
    
    ei.layer_param{6}.outputDim = numClasses;


    
    db_images = images(:,:,:,1:10);
    db_labels = labels(1:10);
    db_theta = mine_cnnInitParams(imageDim,ei.layer_param{1}.numInput,ei);
    
    [cost, grad_stack] = mine_cnnCost(ei, db_theta,db_images,db_labels,numClasses);
    grad = stackToParams(grad_stack);
    
    % Check gradients
    numGrad = mine_computeNumericalGradient( @(x) mine_cnnCost(ei,x,db_images,...
                                db_labels,numClasses), db_theta);
 
    % Use this to visually compare the gradients side by side
    disp([numGrad grad]);
    
    diff = norm(numGrad-grad)/norm(numGrad+grad);
    % Should be small. In our implementation, these values are usually 
    % less than 1e-9.
    disp(diff); 
 
    assert(diff < 1e-8,...
        'Difference too large. Check your gradient computation again');
    
end;

%%======================================================================
%% STEP 3: Learn Parameters
%  Implement minFuncSGD.m, then train the model.


    ei.lambda = 0.00;
    ei.layer_type = {'conv','nonlinear','conv','nonlinear','pool','full'};
    
    ei.layer_param = cell(length(ei.layer_type),1);
    ei.layer_param{1}.filterDim = 9;
    ei.layer_param{1}.numFilters = 20;
    ei.layer_param{1}.numInput = 1;
    
    
    ei.layer_param{2}.activation_fun = 'tanh';
    
    ei.layer_param{3}.filterDim = 5;
    ei.layer_param{3}.numFilters = 4;
    ei.layer_param{3}.numInput = 2;
    
    
    ei.layer_param{4}.activation_fun = 'tanh';
    
    
    
    ei.layer_param{5}.pool_size = 2;
    %now local_size and pool_size must be the same for backprop
    ei.layer_param{5}.local_size = 2;
    ei.layer_param{5}.type = 'max';
    
    ei.layer_param{6}.outputDim = numClasses;
    
    

    
theta = mine_cnnInitParams(imageDim,numChannels, ei);
options.epochs = 2;
options.minibatch = 256;
options.alpha = 1e-1;
options.momentum = .95;

opttheta = mine_minFuncSGD(@(x,y,z) mine_cnnCost(ei, x,y,z,numClasses),theta,images,labels,options);

%%======================================================================
%% STEP 4: Test
%  Test the performance of the trained model using the MNIST test set. Your
%  accuracy should be above 97% after 3 epochs of training

testImages = loadMNISTImages('../common/t10k-images-idx3-ubyte');
testImages = reshape(testImages,imageDim,imageDim,1, []);

testLabels = loadMNISTLabels('../common/t10k-labels-idx1-ubyte');
testLabels(testLabels==0) = 10; % Remap 0 to 10

[~,cost,preds]=mine_cnnCost(ei, opttheta,testImages,testLabels,numClasses,...
                true);

acc = sum(preds==testLabels)/length(preds);

% Accuracy should be around 97.4% after 3 epochs
fprintf('Accuracy is %f\n',acc);
